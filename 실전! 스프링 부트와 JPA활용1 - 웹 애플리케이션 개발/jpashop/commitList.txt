<커밋리스트>

First Commit_InteliJ 환경변수 설정
Test for subBranch
------------------------깃허브 세팅이전------------------------
1. commitList.txt 생성(2022.03.13.)
2. 인텔리제이 환경변수 확인 및 테스트(2022.03.13.)_프로젝트 생성
    1) start.spring.io을 통해 세팅된 인텔리제이 환경변수 세팅 값을 'build.gradle'을 통해서 확인
        1-1) 세팅 값: spring Web, Thymeleaf, spring data JPA, h2 database, lombok
    2) 환경변수 세팅 테스트
        2-1) 'JpashopApplication'을 실행해서 Tomcat서버가 돌아가면 성공
        2-2) 이미 Tomcat서버가 돌아간다면 'iterm2'를 통해 해결 필요 -> sudo lsof -i:8080 -> sudo kill -9 PID번호 -> 다시 'JpashopApplication' 실행
        2-3) 인터넷에서 'localhost:8080' 검색 후 Error Page가 나오면 성공(=Tomcat server가 돌아가고 있음)
        2-4) 추가로 'JpashopApplicationTests'을 통해서 한번 더 확인
    4) lombok 확인/세팅 및 테스트
        4-1) 'Preferences' -> 'Plugins' -> 'Installed'에서 lombok 설치유무 확인
        4-2) 'Preferences' -> 'Annotation processors'에서 [Enable annotation processing] 체크
        4-3) 'LombokTest'클래스를 만들어서 변수 초기화 및 lombok 어노테이션(@Getter, @Setter) 사용
        4-4) 'JpashopApplication'와 같이 어떤 클래스에서나 테스트 가능
3. 라이브러리(2022.03.14.)_라이브러리 살펴보기
    1) 라이브러리 의존관계 확인
        1-1) 'iterms2' -> ./gradlew dependencies
        * 테스트 라이브러리 : junit(테스트 프레임워크), mockito(목 라이브러리),
        assertj(테스트 코드를 좀 더 편하게 작성하게 도와주는 라이브러리) , spring-test(스프링 통합 테스트 지원)
        * 핵심 라이브러리 : 스프링 MVC, 스프링 ORM, JPA, 하이버네이트, 스프링 데이터 JPA
        * 기타 라이브러리 : H2 데이터베이스, 클라이언트 커넥션 풀(부트 기본은 HikariCP),
        WEB(thymeleaf), 로깅 SLF4J & LogBack
4. Thymeleaf 세팅(2022.03.15.)_View 환경설정
    1) Thymeleaf
        1-1) Model이란 ?
        1-2) return 뒤의 값은 무엇을 의미할까?
        1-3) Thymeleaf의 장점 => Copy path를 통해서 정적인 상태(서버 off)에서도 웹에서 화면을 띄울 수 있다.(<->서버 사이드 렌더링)
    2) 페이지 세팅
        2-1) 'Controller'를 이용한 동적 페이지 세팅
        2-2) 정적 페이지 세팅(index.html)
        2-3) 'build gradle' -> devtools 추가 세팅 -> 'Build' -> Recompile
        2-4) @GetMapping("이름") 꼭 입력하기 -> 'localhost:8080/이름'으로 접속한다.
        2-5) '@GetMapping'으로 세팅해두면 기본 'localhost:8080' 주소값으로 인식된다.
5. h2 데이터베이스 설치(2022.03.20.)_H2 데이터베이스 설치
    1) zsh: permission denied: ./h2.sh 오류 발생(이유 : 실행권한이 없음)
        1-1) 'bin'에서 chmod 755 h2.sh 코드 실행(코드 : 읽기, 쓰기 ,실행에 대한 권한을 부여함)
    2) db연동
        2-1) ./h2.sh로 연동
        2-2) url로 접속 : 'http://localhost:8082/login.jsp?jsessionid=2ecf0f90cf61a2d98fea1759594faf84'
        2-3) login.jsp? 뒤에 있는 쿼리스트링의 값을 유지해줘야함
        2-4) 처음에는 'JDBC URL'에 'jdbc:h2:~/jpashop'(파일모드)로 들어가줘야함(DB생성을 위해)
        2-5) 터미널에서 'll' 코드로 jpashop.mv.db 생성여부 확인
        2-6) 연결을 끊고 이후로는 'JDBC URL'는 'jdbc:h2:tcp://localhost/~/jpashop'(네트워크 모드)로 들어가주면 됨
        2-7) ^c을 통해서 db연동 끊을 수 있다.
        2-8) 다시 ./h2.sh로 연동함
6. jpa 및 db설정(2022.03.20.)_JPA와 DB 설정, 동작확인
    1) jpa 기본세팅 및 테스트 케이스 작성
        1-1) application.properties 삭제 -> application.yml 생성
        1-2) application.yml 세팅
        1-3) MemberRepository 코드작성
        1-4) DML언어 특성 => Repository에서 작업하고 리턴(출력)값은 num(Long)타입으로 출력한다.
        1-5) 유닛 테스트 및 통합 테스트 세팅(unit4, RunWith(SpringRunner.class), @SpringBootTest)
        1-6) @Test, @Transactional이란?
        1-7) Assertions.assertThat이란?
7. jpa 및 db설정(2022.04.13.)_JPA와 DB 설정, 동작확인(2)
    1) jpa 기본세팅 및 테스트 케이스 작성
        1-1) DTO -> @Id, @GeneratedValue
        1-2) yml -> org.hibernate.type: trace(sql문 파라미터 확인)
        1-3) build.gradle -> implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.6'(sql문 파라미터 자세하게 확인)
        1-4) 추가 테스트(Assertions.assertThat(findMemberDel).isEqualTo(memberDel); // JPA 엔티티 동일성 보장)
8. 요구사항 분석, 도메인 모델과 테이블 설계, 엔티티 클래스 개발
    1) 엔티티 클래스 개발
        1-1) 1:1, 1:N, N:1, N:N 확인해서 개발
9. 엔티티 설계시 주의점(2022.04.14.)_엔티티 설계시 주의점
    1) 엔티티 설계시 주의점
        1-1) 가능하면 Setter를 열지 않기
        1-2) @***ToOne에 FetchType.LAZY(지연로딩) 걸어주기
        1-3) 연관관계의 주인을 정하기
        1-4) 실무에서는 @ManyToMany 사용금지
        1-5) 컬렉션 초기화
        1-6) 연관관계 메서드(양방향일 경우에 세팅 필요)
10. 회원 리포지토리, 서비스 개발 및 테스트(2022.04.14.)_회원 리포지토리, 서비스 개발 및 테스트
    1) 회원 리포지토리, 서비스 개발 및 테스트
        1-1) MVC패턴
        1-2) @Repository(스프링 빈 등록)_@PersistenceContext(EntityManager 주압) -> @Autowired 대체 가능
        1-3) EntityManager
        1-4) createQuery("select m from Member m where m.name=:name").setParameter("key", "value").getResultList()
        1-5) @Transactional(readOnly:true) -> 읽기 전용_성능 최적화(쓰기에는 적용X)
        1-6) 생성자 주입 -> private final MemberRepository memberRepository;(@Autowired 생략갸능)
        1-7) final -> 컴파일 시점에서 memberRepository 오류 체크 가능
        1-8) @RequiredArgsConstructor -> 생성자를 자동으로 만들어줌
        1-9) 테스트 케이스 -> @Runwith(SpringRunner.class), @SpringBootTest 기본세팅
        1-10) @Transactional -> @Test일 경우에는 rollback기능을 수행
        1-11) 테이스 케이스를 할 때, resources와 yml 파일(DB 설정, 없어도 스프링이 자체적으로 DB 생성)을 들고와서 다른 DB로 테스트가 가능
11. 상품 도메인 개발(2022.04.15.)_회원 도메인 개발
    1) 상품 리포지토리, 서비스 개발
        1-1) MVC패턴
12. 주문 도메인 개발(2022.04.23.)_주문 도메인 개발
    1) 주문, 주문 상품 엔티티 개발
    2) 주문 리포지토리 개발
    3) 주문 서비스 개발
    4) 주문 기능 테스트
13. 주문 검색 기능 개발 & 동적 쿼리(2022.04.25.)_주문 도메인 개발
    1) 주문 검색 기능 개발 & 동적 쿼리
14. 홈 화면과 레이아웃(2022.04.25.)_웹 계층 개발
    1) 홈 화면과 레이아웃
15. 회원 등록(2022.04.26.)_웹 계층 개발
    1) 회원 등록
    2) @Validation
    3) MemberForm 나누기
16. 회원 조회(2022.04.26.)_웹 계층 개발
    1) 회원 조회
    2) service에서 전달 받은 데이터를 가능하면 따로 DTO를 만들어서 사용할 것
17. 상품 등록, 조회, 수정(2022.04.26.)_웹 계층 개발
    1) 상품 등록
    2) 상품 조회
    3) 상품 수정(변경감지, merge)
18. 주문 등록, 조회, 삭제(2022.04.26.)_웹 계층 개발
    1) 주문 등록
    2) 주문 조회(에러 발생)
    3) 주문 삭제
