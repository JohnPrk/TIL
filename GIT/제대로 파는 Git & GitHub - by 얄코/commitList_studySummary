
<commitList + studySummary>

1. 깃 버전 확인 및 설치, 소스트리(GUI) 설치, Iterms2 설치
    - 깃 버전 확인 : git version
    - 깃 설치(Mac) -> 터미널 이용
        1) 인터넷에서 홈브루(homebrew) 복사
            - /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        2) 홈브루 설치 완료 후, 깃 설치
            - brew install git
    - 소스트리 설치(다운)
    - Iterms2 설치(다운)

2. 깃 최초 세팅
    - 사용자 이름과 사용자 이메일 세팅
        - 이름 : git config --global user.name 본인 아이디
        - 이메일 : git config --global user.email 본인 이메일
    - 세팅된 값 확인
        - 이름 : git config --global user.name
        - 이메일 : git config --global user.email
    - 기본 브랜치명 변경(master -> main)
        - git config --global init.defaultBranch main
        - 요즘은 master에서 main으로 바꿔쓴다(주황색 배경)
    - 깃 관리 시작
        - 깃 관리 시작 : git init
3. gitignore
    - 프로젝트 작업시 로컬 환경의 정보나 빌드 정보등 원격 저장소에 관리하지 말아야되는 파일들에 대해서 지정하여 원격 저장소에 실수로 올라가지 않도록 관리하는 파일
    - gitignore은 프로젝트 최상단 디렉토리에 위치해야한다.

4. 오류 잡기 및 reset&revert
    - 몇 시점 앞으로 자신의 커밋을 되돌리기 => git reset --hard HEAD~숫자(몇 시점 앞으로 갈지)
    - 이미 원격저장소에 저장된 커밋을 되돌리기 => 몇 시점 앞으로 간 상태에서 git push -f origin main
    - 원하는 커밋 시점으로 초기화(이후 커밋 시점은 삭제) : git reset --hard commit 메시지
    - 마지막 커밋 시점으로 초기화(이후 커밋 시점은 삭제) : git reset --hard
    - 원하는 시점의 커밋만 없애고 파일을 복사(revert) 해주기 : git revert commit 메시지 -> revert 저장
     => 협업 시에는 가능하면 revert를 사용
     - 단, revert을 해서 커밋을 없애는 것이 다른 커밋과 충돌이 일어날 때는 처리가 필요함
     예) revert로 xx.yaml파일 삭제하지만 다른 커밋에서 xx.yaml 존재할 경우 충돌이 발생 -> revert 보류 상태
     - 원하는 파일을 강제로 삭제 : git rm 파일명(충돌 나는 것들을 해결해주는 코드 예시 중에 하나)
     - 계속 revert 진행하기 => git revert continue -> revert 저장
     - commit은 하지 않고 revert만 하는 경우 : git revert --no--commit -> 이후에 커밋이 필요
     - 소스트리로 revert 해보기 : 마우스 오른쪽 클릭 -> 커밋 되돌리기
     - 소스트리로 reset 해보기 : 마우스 오른쪽 클릭 -> 이 커밋까지 현재 브랜치를 초기화

5. branch
    - 새로운 브랜치 추가 : git branch 새로운 브랜치명
    - 다른 브랜치로 이동(현재 브랜치의 내용이 그대로 복붙돼서 브랜치가 시작됨) : git switch 브랜치명
    - 원하는 브랜치 삭제 : git branch -d 브랜치명
    - 정상적으로 merge되어 있지 않거나 충돌이 해결되지 않은 브랜치의 경우에는 삭제가 불가능할 때가 있다.(어떤 이유로 이런 일이 생기는지 더 공부해보자)
    => 이럴 때는 강제적으로 브랜치를 삭제할 수 있다. : git branch -D 브랜치명
    - 브랜치 이름 바꾸기 : git branch -m 현재 브랜치명 바꿀 브랜치명(-m: move)
    - 다른 브랜치로 이동을 하면 싹만 틔우고 commit을 해야지 갈래로 나뉨
    - git log는 현재 사용하고 있는 브랜치를 기준으로 commit 내용을 알려준다.
    - 여러(모든) 브랜치의 내역을 편리하게 보기 : git log --all --decorate --oneline --graph

6. merge
    - merge : 두 개의 브랜치를 하나로 합치면서 커밋을 발생시킨다.
    - rebase : 서브 브랜치의 커밋 내용을 메인 브랜치에다가 추가 한다.(=잔가지들 싹 다 잘라서 몸통에 붙이는 행위)
    - 'merge'와 'rebase'의 차이점:
        - merge는 브랜치(히스토리)의 흔적을 남긴다.
        - rebase는 브랜치(히스토리)의 흔적을 남기지 않는다.
        => 기능은 거의 동일하기 때문에 프로젝트의 성향에 맞춰서 작업을 하면 된다.
    - merge 작업 이후에 서브 브랜치는 삭제한다.
    - rebase 작업은 서브 브랜치에서 메인을 rebase한다.
    - rebase 작업 이후에는 메인 브랜치와 서브 브랜치가 서로 다르기 때문에 메인 브랜치에서 다시 서브 브랜치를 merge한다.

7. merge/rebase 충돌(더 공부가 필요)
    - 두 개의 브랜치를 합병할 때, 각각의 브랜치의 클래스의 같은 줄에 다른 내용이 있다면 어느 것을 선택해야할지 몰라 멈추게 됨
    - 이를 충돌이라고 표현한다.
    - 터미널에서는 충돌된 곳을 표시해주고 사용하는 IDE에서는 충돌된 내용을 알려준다.
    - 충돌 이후로는 수정을 제외한 다른 기능이 제한되고 이를 당장에 해결하기 어렵다면 merge를 잠시 멈춰야 한다.
    - git merge --abort : merge 잠시 멈추기
    - 충돌된 내용을 수정 후에 git add와 커밋을 하면 자동으로 커밋명을 알려줌
    - merge와 rebase는 거의 동일하지만 충돌이 마칠 때까지 rebase는 작업을 한 번 더 해야함
    - git rebase --continue

8. git clone
    - 깃허브에 올라와 있는 파일 뿐만 아니라 .gitignore 파일까지도 복사해준다.
    - 깃허브에서 Download ZIP하는 것과 다르다.
    
9. push/pull
    - git push -u origin main(= git push --set-upstream origin main)
        - 로컬 저장소에 있는 파일을 orgin이라는 원격 브랜치를 통해서 원격 저장소의 main 브랜치에 올려주는 세팅을 한다.
        - 한번 세팅을 하면 이 후로는 git push만 해도 된다.
    - pull
        - 기본적으로 원격 저장소에 이미 파일이 올라왔다면 이후로는 무조건 pull을 하고 push가 가능하다.
        - 하지만 같은 파일 내에서 작업을 하면 충돌이 발생한다. -> 충돌 수정 -> git add . -> git commit(merge 방식) 순으로 진행한다.
                                                   -> 충돌 수정 -> git add . -> git rebase --continue(rebase 방식)
        - pull은 두 가지로 나뉠 수 있다.
        - 원격의 저장소에서 작업한 것을 마치 다른 브랜치에서 작업한 것처럼 해서 로컬 저장소의 브랜치와 원격 저장소의 브랜치를
          새로운 하나의 브랜치로 합친다(git pull --no-rebase : merge 방식)
        - 원격의 저장소에 올라간 시간의 순서대로 커밋들을 이어준다(git pull --rebase : rebase 방식)

10. 로컬의 내역을 강제 push 하기
    - git push --force
    - 원격 저장소에 올린 파일이 잘못되었을 때 일반적으로 사용
    - 다른 사람의 저장이 날라갈 수 있으니 미리 사전에 이야기한 상태로 해야함
    - reset한 시점으로 내용에서 push가 되기 때문에 현재 ~ reset한 시점에 있는 모든 파일은 날라가게 됨

11. branch, fetch
    - git branch --all(= git branch -a)
    - git push origin --delete 원격 브랜치명
    
12. HEAD
    - git checkout HEAD^
    - git checkout HEAD~
        - ^, ~의 개수만큼 이 전 커밋 위치로 이동 => reset, rebase의 개념은 아님/그냥 단순히 위치 이동
    - git checkout -
        - ctrl + z(되돌리기)

